(window.webpackJsonp=window.webpackJsonp||[]).push([[87],{514:function(t,s,a){"use strict";a.r(s);var n=a(2),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"let-和-const-与-var"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#let-和-const-与-var"}},[t._v("#")]),t._v(" let 和 const 与 var")]),t._v(" "),s("h2",{attrs:{id:"_1、let-和-const-不允许重复声明变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、let-和-const-不允许重复声明变量"}},[t._v("#")]),t._v(" 1、let 和 const 不允许重复声明变量")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("// 使用 var 的时候重复声明变量是没问题的，只不过就是后面会把前面覆盖掉\nvar num = 100\nconsole.log(num)   //100\nvar num = 200\nconsole.log(num)   //200\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("// 使用 let 重复声明变量的时候就会报错了\nlet num = 100\nconsole.log(num)   //100\nlet num = 200 // 这里就会报错了\nconsole.log(num)   //error\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("// 使用 const 重复声明变量的时候就会报错\nconst num = 100\nconsole.log(num)   //100\nconst num = 200 // 这里就会报错了\nconsole.log(num)   //error\n")])])]),s("h2",{attrs:{id:"_2、let-和-const-声明的变量不会在预解析的时候解析-也就是没有变量提升"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、let-和-const-声明的变量不会在预解析的时候解析-也就是没有变量提升"}},[t._v("#")]),t._v(" 2、let 和 const 声明的变量不会在预解析的时候解析（也就是没有变量提升）")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("// 因为预解析（变量提升）的原因，在前面是有这个变量的，只不过没有赋值\nconsole.log(num) // undefined\nvar num = 100\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("// 因为 let 不会进行预解析（变量提升），所以直接报错了\nconsole.log(num) // error\nlet num = 100\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("// 因为 const 不会进行预解析（变量提升），所以直接报错了\nconsole.log(num) // error\nconst num = 100\n")])])]),s("h2",{attrs:{id:"_3、let-和-const-声明的变量会被所有代码块限制作用范围"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3、let-和-const-声明的变量会被所有代码块限制作用范围"}},[t._v("#")]),t._v(" 3、let 和 const 声明的变量会被所有代码块限制作用范围")]),t._v(" "),s("ol",[s("li",[t._v("var 声明的变量只有函数能限制其作用域，其他的不能限制")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("if (true) {\n  var num = 100\n}\nconsole.log(num) // 100\n")])])]),s("ol",[s("li",[t._v("let 声明的变量，除了函数可以限制，所有的代码块都可以限制其作用域（if/while/for/...）")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("if (true) {\n  let num = 100\n  console.log(num) // 100\n}\nconsole.log(num) // 报错\n")])])]),s("ol",[s("li",[t._v("const 声明的变量，除了函数可以限制，所有的代码块都可以限制其作用域（if/while/for/...)")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("\nif (true) {\n  const num = 100\n  console.log(num) // 100\n}\nconsole.log(num) // 报错\n")])])]),s("h2",{attrs:{id:"二、let-和-const-的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、let-和-const-的区别"}},[t._v("#")]),t._v(" 二、let 和 const 的区别")]),t._v(" "),s("h3",{attrs:{id:"_1、let-声明的变量的值可以改变-const-声明的变量的值不可以改变"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、let-声明的变量的值可以改变-const-声明的变量的值不可以改变"}},[t._v("#")]),t._v(" 1、let 声明的变量的值可以改变，const 声明的变量的值不可以改变")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("let num = 100\nconsole.log(num) // 100\nnum = 200\nconsole.log(num) // 200 \n")])])]),s("p",[t._v("但是，如果 const声明的变量存储的是 一个对象或数组，我们可以改变对象或数组中的值")]),t._v(" "),s("p",[t._v("只是不能对这个对象或数组发生改变")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("const c = [1,2,3,4,5];\nconsole.log(c);  // [1, 2, 3, 4, 5]\nc[2] = '哈哈';\nconsole.log(c);  // [1, 2, '哈哈', 4, 5]\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("const num = 100\nnum = 200 // 这里就会报错了，因为 const 声明的变量值不可以改变（我们也叫做常量）\n")])])]),s("h3",{attrs:{id:"_2、let-声明的时候可以不赋值-const-声明的时候必须赋值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、let-声明的时候可以不赋值-const-声明的时候必须赋值"}},[t._v("#")]),t._v(" 2、let 声明的时候可以不赋值，const 声明的时候必须赋值")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("let num\nnum = 100\nconsole.log(num) // 100\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("const num // 这里就会报错了，因为 const 声明的时候必须赋值\n")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);